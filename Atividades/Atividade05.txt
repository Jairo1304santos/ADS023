1. Criar um projeto React Native.

a) Abra o aplicativo VSCode.

b) Selecione a pasta ADS023 e abra o terminal pressionando CTRL+'.

c) Crie um novo projeto React Native chamado Atividade05 usando o template em branco.

d) Pelo terminal do VSCode, acesse a pasta atividade05 e instale o componente react-native-vector-icons.

npm install --save react-native-vector-icons

e) Pelo Windows crie um atalho da pasta node_modules\react-native-vector-icons\Fonts dentro da pasta assets do projeto atividade05.

f) Altere a função App para retornar somente um componente View.

return (
  <View style={styles.container}>
  </View>
);

g) Altere o estilo container para conter as propriedades abaixo.

container: {
  flex: 1,
  backgroundColor: '#fff'
}

h) Execute o projeto no modo web (Dica: expo start --web).

i) Abra no navegador a URL https://oblador.github.io/react-native-vector-icons/ para exibir a lista de ícones AntDesign.



2. Criar uma tela login com React Native.

a) Crie uma pasta screens dentro do projeto. 

b) Crie um arquivo Login.js dentro da pasta screens.

c) No arquivo Login.js importe os pacotes do React e ReactNative.

import 'React' from 'react';
impor { StyleSheet, View } from 'react-native;

d) Digite a estrutura básica de um componente React Native no arquivo Login.js.

export default function Login() {
  return (
     <View style={styles.container}>
     </View>
  );
}

const styles = StyleSheet.create({
});

e) Dentro da variável styles, crie um estilo container com as propriedades abaixo. 

container: {
  paddingTop: 100,
  paddingLeft: 20,
  paddingRight: 20
},

f) Dentro da View principal crie três componentes View. No primeiro componente atribua o estilo { alignItems: 'center' }, no segundo atribua o estilo { paddingTop: 16 } e no terceiro o estilo { paddingTop: 32 }.

<View style={{ alignItems: 'center' }}></View>
<View style={{ paddingTop: 16 }}></View>
<View style={{ paddingTop: 32 }}></View>

g) Dentro do primeiro View, adicione um componente Image que deve carregar a imagem iesb_vermelha.png (Dica: obtenha a image do github e salve na pasta assets). 

<Image style={styles.logo} source={require('../assets/logo_vermelha.png')} />

h) Na variável styles, crie um estilo logo com as propriedades abaixo.

logo: {
  height: 68,
  width: 68
},

i) Dentro do primeiro View, adicione um componente View com o estilo { flexDirection: 'row', paddingTop: 16 } contendo um componente Text como elemento filho.

<View style={{ flexDirection: 'row', paddingTop: 16 }}>
   <Text style={styles.title}></Text>
</View>

j) Dentro da variável sytles, crie um estilo title contendo as propriedades abaixo.

title: {
  fontFamily: 'Arial',
  fontSize: 26,
  fontWeight: 'bold'
},

k) Dentro do componente Text adicione dois componentes Text para exibir o título alunoonline. Atribua ao segundo componente o estilo { color: '#92949c' }.

<Text>aluno</Text><Text style={{ color: '#92949c' }}>online</Text>

l) Dentro do segundo View criado no item f), adicione dois componentes TextInput, uma para ler matrícula e outro para a senha.

<TextInput style={styles.input} placeholder='Matrícula' keyboardType='numeric' require='true' />
<TextInput style={styles.input} placeholder='Senha' secureTextEntry={true} require='true' />

m) Dentro da variável sytles, crie um estilo input contendo as propriedades abaixo.

input: {
  height: 40,
  padding: 8,
  marginTop: 8,
  borderBottomWidth: 1,
  borderColor: '#c1c4cd',
  fontFamily: 'Arial',
  fontSize: 16
}

n) Dentro do terceiro View criado no item f), adicione um componente Button.

<Button color='red' title='Entrar' />

o) Na função App, acrescente o componente Login dentro de View para exibir a screen Login.js (Dica: importe a função Login a partir de './screens/Login'.



3. Criar uma tela de lista de requerimentos com React Native.

a) Crie um arquivo Lista.js dentro da pasta screens.

b) No arquivo Lista.js importe os pacotes do React, ReactNative. Importe também o componente Icon do pacote 'react-native-vector-icons/AntDesign'.

c) Carregue a lista de ícones da fonte AntDesign.

Icon.loadFont();

d) Crie uma constante requerimentos que deve armazenar um array de objetos JS que representam os requerimentos registrados pelo aluno.

const requerimentos = [
  {
    title: { curso: 'Análise e Desenvolvimento de Sistemas', periodo: '20191' },
    data: [
      { id: 1, disciplina: 'ADS023 - Programação para Dispositivos Móveis', prova: 'Prova A1', status: 'D' },
      { id: 2, disciplina: 'RCT024 - Gerência de Projetos', prova: 'Prova A2', status: 'I' }
    ]
  },
];

e) Digite a estrutura básica de um componente React Native no arquivo Lista.js.

export default function Lista() {
  return (
     <View style={styles.container}>
     </View>
  );
}

const styles = StyleSheet.create({
});

f) Dentro da variável styles, crie um estilo container com as propriedades abaixo. 

container: {
  flex: 1
},

g) Dentro da View principal crie dois componentes View, um componente SectionList e um componente TouchableOpacity.

<View style={styles.header1}></View>
<View style={styles.header2}></View>
<SectionList/>
<TouchableOpacity style={styles.fab}></TouchableOpacity>

h) Dentro da variável sytles, crie os estilos header1, header2 e fab. Atribua as seguintes propriedades a cada um deles.

header1: {
  height: 56,
  backgroundColor: 'red',
  flexDirection: 'row',
  alignItems: 'center',
  justifyContent: 'space-between',
  paddingLeft: 8,
  paddingRight: 8
},
header2: {
  paddingLeft: 16,
  height: 40,
  justifyContent: 'center',
  paddingBottom: 8,
  paddingTop: 8
},
fab: {
  position: 'absolute',
  bottom: 10,
 right: 10
}

i) Dentro do primeiro View, adicione um componente Image que deve carregar a imagem iesb_branca.png (Dica: obtenha a image do github e salve na pasta assets). 

<Image style={styles.logo} source={require('../assets/logo_branca.png')} />

j) Na variável styles, crie um estilo logo com as propriedades abaixo.

logo: {
  height: 32,
  width: 32,
  marginRight: 8
},

k) Dentro do primeiro View, adicione um componente View com o estilo { flexDirection: 'row', paddingTop: 16 } contendo um componente Text como elemento filho.

l) Dentro do primeiro View, adicione um componente Text para exibir o título do aplicativo.

<Text style={styles.title1}>Aluno Online</Text>

m) Na variável styles, crie um estilo title1 com as propriedades abaixo. 

title1: {
  fontFamily: 'Arial',
  fontSize: 20,
  fontWeight: '500',
  color: 'white'
},

n) Dentro do primeiro View, adicione um componente TouchableOpacity com um Icon que represente a ação de logout.

<TouchableOpacity><Icon name="logout" color='white' size={20} /></TouchableOpacity>

o) Dentro do segundo View, adicione um componente Text para exibir o título Seus requerimentos.

<Text style={styles.title2}>Seus requerimentos</Text>

p) Na variável styles, crie um estilo title2 com as propriedades abaixo. 

title2: {
  fontFamily: 'Arial',
  fontSize: 20,
  fontWeight: '500'
},

q) No componente SectionList atribua a propriedades section, keyExtractor, renderSectionHeader e renderItem o valores abaixo. 

<SectionList
  sections={requerimentos}
  keyExtractor={item => item.id}
  renderSectionHeader={({ section }) => {
      return (
         <View style={styles.header3}>
              <Text style={styles.title3}>{section.title.curso}</Text>
              <Text style={styles.title3}>Período {section.title.periodo}</Text>
         </View>
      )
  }}
  renderItem={({ item }) => {
     const icon = (item.status == 'D') ? { name: 'checkcircle', color: '#10dc60' } : { name: 'closecircle', color: '#f04141' };
     return (
       <View style={styles.list}>
           <View style={{ paddingTop: 10, paddingBottom: 10 }}>
               <Text style={styles.title4}>{item.disciplina}</Text>
               <Text style={[styles.title4, { color: '#92949c' }]}>{item.prova}</Text>
           </View>
           <View style={styles.status}>
                <Icon name={icon.name} size={21} color={icon.color} />
           </View>
        </View>
      );
  }}
/>

r) Na variável styles, crie os estilo header3, title3, list, title4 e status com as respectivas propriedades abaixo. 

header3: {
  paddingLeft: 16,
  height: 50,
  justifyContent: 'center',
  paddingBottom: 8,
  paddingTop: 8,
  backgroundColor: '#f4f5f8',
  flexDirection: 'column'
},
title3: {
  fontFamily: 'Arial',
  fontSize: 14,
  fontWeight: '500'
},
list: {
  flexDirection: 'row',
  alignItems: 'center',
  borderBottomWidth: 1,
  borderColor: '#c1c4cd',
  marginLeft: 16
},
title4: {
  fontFamily: 'Arial',
  fontSize: 14,
},
status: {
  position: 'absolute',
  right: 8
},

s) Dentro do último TouchableOpacity adicione um Icon para representar a ação Adicionar.

<Icon name="pluscircle" size={56} color='red' />

t) Na função App, troque o componente Login dentro de View pelo componente Lista para exibir a screen Lista.js (Dica: importe a função Lista a partir de './screens/Lista'.



4. Criar um tela de novo requerimento com React Native.

a) Crie um arquivo Novo.js dentro da pasta screens.

b) No arquivo Novo.js importe os pacotes do React, ReactNative. Importe também o componente Icon do pacote 'react-native-vector-icons/AntDesign'.

c) Carregue a lista de ícones da fonte AntDesign.

Icon.loadFont();

d) Digite a estrutura básica de um componente React Native no arquivo Novo.js.

export default function Novo() {
  return (
     <View>
     </View>
  );
}

const styles = StyleSheet.create({
});

e) Dentro da View principal crie dois componentes View.

<View style={styles.header}></View>
<View style={{ paddingLeft: 16 }}></View>

f) Dentro da variável styles, adicione o estilo header com as propriedades abaixo.

header: { 
   height: 56, 
   backgroundColor: 'red', 
   flexDirection: 'row', 
   alignItems: 'center', 
   justifyContent: 'space-between', 
   paddingLeft: 8, 
   paddingRight: 8 
},

g) Dentro do primeiro View, adicione um componente TouchableOpacity para exibir o Icon da ação Voltar. 

<TouchableOpacity>
  <Icon name="left" size={20} color='white' />
</TouchableOpacity>

h) Dentro do primeiro View, adicione um componente Text para o título da tela.

<Text style={styles.title}>Novo Requerimento</Text>

i) Dentro da variável styles, adicione o estilo title com as propriedades abaixo.

title: { 
   fontFamily: 'Arial', 
   fontSize: 20, 
   fontWeight: '500', 
   color: 'white'
},

j) Dentro do primeiro View, adicione um componente Button para a ação Salvar.

<Button color='red' title='Salvar'/>

k) Dentro do segundo View, adicione um componente Text e um componente Picker para representar o campo de Disciplina, um componente Text e um componente Picker para representar o campo de Prova, e um componente TextInput para o campo Argumentação.

<Text style={styles.label}>Disciplina</Text>
<Picker></Picker>
<Text style={styles.label}>Prova</Text>
<Picker></Picker>
<TextInput style={styles.textarea}/>

l) Dentro da variável styles, adicione os estilos label e textarea com as propriedades abaixo.

label: { 
  fontFamily: 'Arial', 
  fontSize: 13, 
  color: '#92949c', 
  paddingTop: 16, 
  paddingBottom: 8 
},
textarea: { 
  borderBottomWidth: 1, 
  borderColor: '#c1c4cd', 
  paddingTop: 16 
}

m) Dentro do primeiro Picker adicione as disciplinas ADS023 - Programação para Dispositivos Móveis e RCT024 - Gerência de Projetos.

<Picker.Item label='Selecione uma disciplina' value='' />
<Picker.Item label='ADS023 - Programação para Dispositivos Móveis' value='ADS023' />
<Picker.Item label='RCT024 - Gerência de Projetos' value='RCT024' />

n) Dentro do segundo Picker adicione as provas A1, A2 e A3.

<Picker.Item label='Selecione uma prova' value='' />
<Picker.Item label='Prova A1' value='A1' />
<Picker.Item label='Prova A2' value='A2' />
<Picker.Item label='Prova A3' value='A3' />

o) Defina as propriedades placeholder, placeholderTextColor, multiline e numberOfLines para o componente TextInput.

<TextInput
   style={styles.textarea}
   placeholder='Argumentação'
   placeholderTextColor='#92949c'
   multiline={true}
   numberOfLines={4}
/>

p) Na função App, troque o componente Lista dentro de View pelo componente Novo para exibir a screen Novo.js (Dica: importe a função Novo a partir de './screens/Novo'.

q) Pressione as teclas Ctrl+Shift+G para acessar o painel do Git. Em seguida, clique em Stage All.

r) Efetive o commit acionando a opção Commit All. Não esqueça de por um comentário ao commit (Ex.: Criando o projeto Atividade05).

s) Envie os arquivos versionados para o git remoto acionando a opção Push. Informe usuário/senha e acione a opção Sign in.
